/* automatically generated by rust-bindgen 0.69.4 */

pub const WOLFSSL_GENERAL_ALIGNMENT: u32 = 0;
pub const ECC_MIN_KEY_SZ: u32 = 224;
pub const AES_MAX_KEY_SIZE: u32 = 256;
pub const MIN_FFDHE_BITS: u32 = 0;
pub const MIN_FFDHE_FP_MAX_BITS: u32 = 0;
pub const WOLFSSL_MIN_AUTH_TAG_SZ: u32 = 12;
pub const WC_ASYNC_DEV_SIZE: u32 = 0;
pub const WOLFSSL_ALERT_COUNT_MAX: u32 = 5;
pub const _PTHREAD_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const WOLFSSL_CRYPT_HW_MUTEX: u32 = 0;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const __cookie_io_functions_t_defined: u32 = 1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const XSEEK_SET: u32 = 0;
pub const XSEEK_END: u32 = 2;
pub const _DIRENT_H: u32 = 1;
pub const _DIRENT_MATCHES_DIRENT64: u32 = 1;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const MAXNAMLEN: u32 = 255;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SYS_STAT_H: u32 = 1;
pub const _BITS_STAT_H: u32 = 1;
pub const _BITS_STRUCT_STAT_H: u32 = 1;
pub const __S_IFMT: u32 = 61440;
pub const __S_IFDIR: u32 = 16384;
pub const __S_IFCHR: u32 = 8192;
pub const __S_IFBLK: u32 = 24576;
pub const __S_IFREG: u32 = 32768;
pub const __S_IFIFO: u32 = 4096;
pub const __S_IFLNK: u32 = 40960;
pub const __S_IFSOCK: u32 = 49152;
pub const __S_ISUID: u32 = 2048;
pub const __S_ISGID: u32 = 1024;
pub const __S_ISVTX: u32 = 512;
pub const __S_IREAD: u32 = 256;
pub const __S_IWRITE: u32 = 128;
pub const __S_IEXEC: u32 = 64;
pub const UTIME_NOW: u32 = 1073741823;
pub const UTIME_OMIT: u32 = 1073741822;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFIFO: u32 = 4096;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXU: u32 = 448;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXG: u32 = 56;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_IRWXO: u32 = 7;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const SEPARATOR_CHAR: u8 = 58u8;
pub const MAX_FILENAME_SZ: u32 = 261;
pub const MAX_PATH: u32 = 261;
pub const WC_READDIR_NOFILE: i32 = -1;
pub const WC_ISFILEEXIST_NOFILE: i32 = -1;
pub const FILE_BUFFER_SIZE: u32 = 1024;
pub const HAVE_PTHREAD: u32 = 1;
pub const HAVE_ANONYMOUS_INLINE_AGGREGATES: u32 = 1;
pub const SIZEOF_LONG: u32 = 8;
pub const WOLFSSL_MAX_16BIT: u32 = 65535;
pub const WOLFSSL_MAX_32BIT: u32 = 4294967295;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _CTYPE_H: u32 = 1;
pub const WOLFSSL_MAX_ERROR_SZ: u32 = 80;
pub const INVALID_DEVID: i32 = -2;
pub const TRUE: u32 = 1;
pub const FALSE: u32 = 0;
pub const RNG_MAX_BLOCK_LEN: u32 = 65536;
pub const DRBG_SEED_LEN: u32 = 55;
pub const WC_RESEED_INTERVAL: u32 = 1000000;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const SP_UCHAR_BITS: u32 = 8;
pub const SP_USHORT_BITS: u32 = 16;
pub const SP_UINT_BITS: u32 = 32;
pub const SP_ULONG_BITS: u32 = 64;
pub const SP_ULLONG_BITS: u32 = 64;
pub const SP_WORD_SIZE: u32 = 32;
pub const SP_WORD_SIZEOF: u32 = 4;
pub const SP_MASK: u32 = 4294967295;
pub const SP_HALF_SIZE: u32 = 16;
pub const SP_DIGIT_MAX: u32 = 4294967295;
pub const SP_WORD_SHIFT: u32 = 5;
pub const SP_WORD_MASK: u32 = 31;
pub const SP_PRINT_FMT: &[u8; 5] = b"%08x\0";
pub const SP_INT_BITS: u32 = 3072;
pub const SP_INT_DIGITS: u32 = 193;
pub const SP_INT_MAX_BITS: u32 = 6176;
pub const MP_NO: u32 = 0;
pub const MP_YES: u32 = 1;
pub const MP_RADIX_DEC: u32 = 10;
pub const MP_RADIX_HEX: u32 = 16;
pub const MP_GT: u32 = 1;
pub const MP_EQ: u32 = 0;
pub const MP_LT: i32 = -1;
pub const MP_OKAY: u32 = 0;
pub const MP_MEM: i32 = -2;
pub const MP_VAL: i32 = -3;
pub const FP_WOULDBLOCK: i32 = -4;
pub const MP_NOT_INF: i32 = -5;
pub const MP_RANGE: i32 = -5;
pub const DIGIT_BIT: u32 = 32;
pub const MP_MASK: u32 = 4294967295;
pub const WC_TYPE_HEX_STR: u32 = 1;
pub const WC_TYPE_UNSIGNED_BIN: u32 = 2;
pub const WC_HMAC_INNER_HASH_KEYED_SW: u32 = 1;
pub const WC_HMAC_INNER_HASH_KEYED_DEV: u32 = 2;
pub const WC_RSA_EXPONENT: u32 = 65537;
pub const RSA_MIN_SIZE: u32 = 512;
pub const RSA_MAX_SIZE: u32 = 3072;
pub const WC_MGF1NONE: u32 = 0;
pub const WC_MGF1SHA1: u32 = 26;
pub const WC_MGF1SHA224: u32 = 4;
pub const WC_MGF1SHA256: u32 = 1;
pub const WC_MGF1SHA384: u32 = 2;
pub const WC_MGF1SHA512: u32 = 3;
pub const WC_MGF1SHA512_224: u32 = 5;
pub const WC_MGF1SHA512_256: u32 = 6;
pub const WC_RSA_PKCSV15_PAD: u32 = 0;
pub const WC_RSA_OAEP_PAD: u32 = 1;
pub const WC_RSA_PSS_PAD: u32 = 2;
pub const WC_RSA_NO_PAD: u32 = 3;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::std::mem::MaybeUninit<sched_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<cpu_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_cleanup_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__canceltype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___cancel_jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__cancel_jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__cancel_jmp_buf_tag>(),
        72usize,
        concat!("Size of: ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__cancel_jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_unwind_buf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cleanup_frame> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type wolfSSL_Mutex = pthread_mutex_t;
pub type wolfSSL_RwLock = wolfSSL_Mutex;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct wolfSSL_Ref {
    pub mutex: wolfSSL_Mutex,
    pub count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_wolfSSL_Ref() {
    const UNINIT: ::std::mem::MaybeUninit<wolfSSL_Ref> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wolfSSL_Ref>(),
        48usize,
        concat!("Size of: ", stringify!(wolfSSL_Ref))
    );
    assert_eq!(
        ::std::mem::align_of::<wolfSSL_Ref>(),
        8usize,
        concat!("Alignment of ", stringify!(wolfSSL_Ref))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wolfSSL_Ref),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(wolfSSL_Ref),
            "::",
            stringify!(count)
        )
    );
}
extern "C" {
    pub fn wolfSSL_RefInit(ref_: *mut wolfSSL_Ref, err: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_RefFree(ref_: *mut wolfSSL_Ref);
}
extern "C" {
    pub fn wolfSSL_RefInc(ref_: *mut wolfSSL_Ref, err: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn wolfSSL_RefDec(
        ref_: *mut wolfSSL_Ref,
        isZero: *mut ::std::os::raw::c_int,
        err: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn wc_InitMutex(m: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitAndAllocMutex() -> *mut wolfSSL_Mutex;
}
extern "C" {
    pub fn wc_FreeMutex(m: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_LockMutex(m: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_UnLockMutex(m: *mut wolfSSL_Mutex) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitRwLock(m: *mut wolfSSL_RwLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FreeRwLock(m: *mut wolfSSL_RwLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_LockRwLock_Wr(m: *mut wolfSSL_RwLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_LockRwLock_Rd(m: *mut wolfSSL_RwLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_UnLockRwLock(m: *mut wolfSSL_RwLock) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfCrypt_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfCrypt_Cleanup() -> ::std::os::raw::c_int;
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
pub type cookie_read_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_write_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type cookie_seek_function_t = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type cookie_close_function_t = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_cookie_io_functions_t {
    pub read: cookie_read_function_t,
    pub write: cookie_write_function_t,
    pub seek: cookie_seek_function_t,
    pub close: cookie_close_function_t,
}
#[test]
fn bindgen_test_layout__IO_cookie_io_functions_t() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_cookie_io_functions_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_cookie_io_functions_t>(),
        32usize,
        concat!("Size of: ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_cookie_io_functions_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_cookie_io_functions_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seek) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(seek)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_cookie_io_functions_t),
            "::",
            stringify!(close)
        )
    );
}
pub type cookie_io_functions_t = _IO_cookie_io_functions_t;
pub type va_list = __gnuc_va_list;
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fopencookie(
        __magic_cookie: *mut ::std::os::raw::c_void,
        __modes: *const ::std::os::raw::c_char,
        __io_funcs: cookie_io_functions_t,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __f: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf(
        __ptr: *mut *mut ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: __ino_t,
    pub d_off: __off_t,
    pub d_reclen: ::std::os::raw::c_ushort,
    pub d_type: ::std::os::raw::c_uchar,
    pub d_name: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_dirent() {
    const UNINIT: ::std::mem::MaybeUninit<dirent> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<dirent>(),
        280usize,
        concat!("Size of: ", stringify!(dirent))
    );
    assert_eq!(
        ::std::mem::align_of::<dirent>(),
        8usize,
        concat!("Alignment of ", stringify!(dirent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_ino) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_reclen) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_reclen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_type) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d_name) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(dirent),
            "::",
            stringify!(d_name)
        )
    );
}
pub const DT_UNKNOWN: _bindgen_ty_11 = 0;
pub const DT_FIFO: _bindgen_ty_11 = 1;
pub const DT_CHR: _bindgen_ty_11 = 2;
pub const DT_DIR: _bindgen_ty_11 = 4;
pub const DT_BLK: _bindgen_ty_11 = 6;
pub const DT_REG: _bindgen_ty_11 = 8;
pub const DT_LNK: _bindgen_ty_11 = 10;
pub const DT_SOCK: _bindgen_ty_11 = 12;
pub const DT_WHT: _bindgen_ty_11 = 14;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __dirstream {
    _unused: [u8; 0],
}
pub type DIR = __dirstream;
extern "C" {
    pub fn closedir(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn opendir(__name: *const ::std::os::raw::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__fd: ::std::os::raw::c_int) -> *mut DIR;
}
extern "C" {
    pub fn readdir(__dirp: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir_r(
        __dirp: *mut DIR,
        __entry: *mut dirent,
        __result: *mut *mut dirent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewinddir(__dirp: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dirp: *mut DIR, __pos: ::std::os::raw::c_long);
}
extern "C" {
    pub fn telldir(__dirp: *mut DIR) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn dirfd(__dirp: *mut DIR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scandir(
        __dir: *const ::std::os::raw::c_char,
        __namelist: *mut *mut *mut dirent,
        __selector: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::std::os::raw::c_int,
        >,
        __cmp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alphasort(__e1: *mut *const dirent, __e2: *mut *const dirent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdirentries(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
        __basep: *mut __off_t,
    ) -> __ssize_t;
}
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_12 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_12 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_12 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_12 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_12 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_12 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_12 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_12 = 7;
pub const _PC_VDISABLE: _bindgen_ty_12 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_12 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_12 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_12 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_12 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_12 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_12 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_12 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_12 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_12 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_12 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_12 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_12 = 20;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_13 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_13 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_13 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_13 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_13 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_13 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_13 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_13 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_13 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_13 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_13 = 10;
pub const _SC_TIMERS: _bindgen_ty_13 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_13 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_13 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_13 = 14;
pub const _SC_FSYNC: _bindgen_ty_13 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_13 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_13 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_13 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_13 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_13 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_13 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_13 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_13 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_13 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_13 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_13 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_13 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_13 = 28;
pub const _SC_VERSION: _bindgen_ty_13 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_13 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_13 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_13 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_13 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_13 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_13 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_13 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_13 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_13 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_13 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_13 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_13 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_13 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_13 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_13 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_13 = 45;
pub const _SC_2_VERSION: _bindgen_ty_13 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_13 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_13 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_13 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_13 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_13 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_13 = 52;
pub const _SC_PII: _bindgen_ty_13 = 53;
pub const _SC_PII_XTI: _bindgen_ty_13 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_13 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_13 = 56;
pub const _SC_PII_OSI: _bindgen_ty_13 = 57;
pub const _SC_POLL: _bindgen_ty_13 = 58;
pub const _SC_SELECT: _bindgen_ty_13 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_13 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_13 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_13 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_13 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_13 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_13 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_13 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_13 = 66;
pub const _SC_THREADS: _bindgen_ty_13 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_13 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_13 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_13 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_13 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_13 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_13 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_13 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_13 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_13 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_13 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_13 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_13 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_13 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_13 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_13 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_13 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_13 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_13 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_13 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_13 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_13 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_13 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_13 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_13 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_13 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_13 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_13 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_13 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_13 = 96;
pub const _SC_2_UPE: _bindgen_ty_13 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_13 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_13 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_13 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_13 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_13 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_13 = 103;
pub const _SC_INT_MAX: _bindgen_ty_13 = 104;
pub const _SC_INT_MIN: _bindgen_ty_13 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_13 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_13 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_13 = 108;
pub const _SC_NZERO: _bindgen_ty_13 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_13 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_13 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_13 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_13 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_13 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_13 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_13 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_13 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_13 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_13 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_13 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_13 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_13 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_13 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_13 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_13 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_13 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_13 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_13 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_13 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_13 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_13 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_13 = 132;
pub const _SC_BARRIERS: _bindgen_ty_13 = 133;
pub const _SC_BASE: _bindgen_ty_13 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_13 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_13 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_13 = 137;
pub const _SC_CPUTIME: _bindgen_ty_13 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_13 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_13 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_13 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_13 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_13 = 143;
pub const _SC_FIFO: _bindgen_ty_13 = 144;
pub const _SC_PIPE: _bindgen_ty_13 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_13 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_13 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_13 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_13 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_13 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_13 = 151;
pub const _SC_NETWORKING: _bindgen_ty_13 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_13 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_13 = 154;
pub const _SC_REGEXP: _bindgen_ty_13 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_13 = 156;
pub const _SC_SHELL: _bindgen_ty_13 = 157;
pub const _SC_SIGNALS: _bindgen_ty_13 = 158;
pub const _SC_SPAWN: _bindgen_ty_13 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_13 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_13 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_13 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_13 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_13 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_13 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_13 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_13 = 167;
pub const _SC_2_PBS: _bindgen_ty_13 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_13 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_13 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_13 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_13 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_13 = 173;
pub const _SC_STREAMS: _bindgen_ty_13 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_13 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_13 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_13 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_13 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_13 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_13 = 180;
pub const _SC_TRACE: _bindgen_ty_13 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_13 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_13 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_13 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_13 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_13 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_13 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_13 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_13 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_13 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_13 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_13 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_13 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_13 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_13 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_13 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_13 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_13 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_13 = 199;
pub const _SC_IPV6: _bindgen_ty_13 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_13 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_13 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_13 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_13 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_13 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_13 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_13 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_13 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_13 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_13 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_13 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_13 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_13 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_13 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_13 = 250;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_14 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_14 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_14 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_14 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_14 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_14 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_14 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_14 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_14 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_14 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_14 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_14 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_14 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_14 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_14 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_14 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_14 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_14 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_14 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_14 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_14 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_14 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_14 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_14 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_14 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_14 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_14 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_14 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_14 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_14 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_14 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_14 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_14 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_14 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_14 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_14 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_14 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_14 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_14 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_14 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_14 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_14 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_14 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_14 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_14 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_14 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_14 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_14 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_14 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_14 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_14 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_14 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_14 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_14 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_14 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_14 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_14 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_14 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_14 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_14 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_14 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_14 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_14 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_14 = 1149;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type dev_t = __dev_t;
pub type ino_t = __ino_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: __dev_t,
    pub st_ino: __ino_t,
    pub st_nlink: __nlink_t,
    pub st_mode: __mode_t,
    pub st_uid: __uid_t,
    pub st_gid: __gid_t,
    pub __pad0: ::std::os::raw::c_int,
    pub st_rdev: __dev_t,
    pub st_size: __off_t,
    pub st_blksize: __blksize_t,
    pub st_blocks: __blkcnt_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub __glibc_reserved: [__syscall_slong_t; 3usize],
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        144usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad0) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__pad0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__glibc_reserved) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__glibc_reserved)
        )
    );
}
extern "C" {
    pub fn stat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstat(__fd: ::std::os::raw::c_int, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fstatat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __buf: *mut stat,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lstat(__file: *const ::std::os::raw::c_char, __buf: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchmod(__file: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmod(__fd: ::std::os::raw::c_int, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchmodat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umask(__mask: __mode_t) -> __mode_t;
}
extern "C" {
    pub fn mkdir(__path: *const ::std::os::raw::c_char, __mode: __mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdirat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknod(
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mknodat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
        __dev: __dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifo(__path: *const ::std::os::raw::c_char, __mode: __mode_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkfifoat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __mode: __mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FileLoad(
        fname: *const ::std::os::raw::c_char,
        buf: *mut *mut ::std::os::raw::c_uchar,
        bufLen: *mut usize,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReadDirCtx {
    pub entry: *mut dirent,
    pub dir: *mut DIR,
    pub s: stat,
    pub name: [::std::os::raw::c_char; 261usize],
}
#[test]
fn bindgen_test_layout_ReadDirCtx() {
    const UNINIT: ::std::mem::MaybeUninit<ReadDirCtx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ReadDirCtx>(),
        424usize,
        concat!("Size of: ", stringify!(ReadDirCtx))
    );
    assert_eq!(
        ::std::mem::align_of::<ReadDirCtx>(),
        8usize,
        concat!("Alignment of ", stringify!(ReadDirCtx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(dir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDirCtx),
            "::",
            stringify!(name)
        )
    );
}
extern "C" {
    pub fn wc_ReadDirFirst(
        ctx: *mut ReadDirCtx,
        path: *const ::std::os::raw::c_char,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ReadDirNext(
        ctx: *mut ReadDirCtx,
        path: *const ::std::os::raw::c_char,
        name: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ReadDirClose(ctx: *mut ReadDirCtx);
}
extern "C" {
    pub fn wc_FileExists(fname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mystrnstr(
        s1: *const ::std::os::raw::c_char,
        s2: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_char;
}
pub type byte = ::std::os::raw::c_uchar;
pub type sword8 = ::std::os::raw::c_schar;
pub type word8 = ::std::os::raw::c_uchar;
pub type sword16 = ::std::os::raw::c_short;
pub type word16 = ::std::os::raw::c_ushort;
pub type sword32 = ::std::os::raw::c_int;
pub type word32 = ::std::os::raw::c_uint;
pub type word24 = [byte; 3usize];
pub type wcchar = *const ::std::os::raw::c_char;
pub type sword64 = ::std::os::raw::c_long;
pub type word64 = ::std::os::raw::c_ulong;
pub type wolfssl_word = word64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct w64wrapper {
    pub n: word64,
}
#[test]
fn bindgen_test_layout_w64wrapper() {
    const UNINIT: ::std::mem::MaybeUninit<w64wrapper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<w64wrapper>(),
        8usize,
        concat!("Size of: ", stringify!(w64wrapper))
    );
    assert_eq!(
        ::std::mem::align_of::<w64wrapper>(),
        8usize,
        concat!("Alignment of ", stringify!(w64wrapper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(w64wrapper),
            "::",
            stringify!(n)
        )
    );
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type wc_ptr_t = usize;
pub const WOLFSSL_WORD_SIZE: _bindgen_ty_15 = 8;
pub const WOLFSSL_BIT_SIZE: _bindgen_ty_15 = 8;
pub const WOLFSSL_WORD_BITS: _bindgen_ty_15 = 64;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn arc4random() -> __uint32_t;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __size: usize);
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: __uint32_t) -> __uint32_t;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type wolfSSL_Malloc_cb =
    ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>;
pub type wolfSSL_Free_cb =
    ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>;
pub type wolfSSL_Realloc_cb = ::std::option::Option<
    unsafe extern "C" fn(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn wolfSSL_Malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_Free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn wolfSSL_Realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn wolfSSL_SetAllocators(
        mf: wolfSSL_Malloc_cb,
        ff: wolfSSL_Free_cb,
        rf: wolfSSL_Realloc_cb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_GetAllocators(
        mf: *mut wolfSSL_Malloc_cb,
        ff: *mut wolfSSL_Free_cb,
        rf: *mut wolfSSL_Realloc_cb,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wc_strtok(
        str_: *mut ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
        nextp: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wc_strsep(
        stringp: *mut *mut ::std::os::raw::c_char,
        delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wc_strlcpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dstSize: usize,
    ) -> usize;
}
extern "C" {
    pub fn wc_strlcat(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        dstSize: usize,
    ) -> usize;
}
pub const _ISupper: _bindgen_ty_16 = 256;
pub const _ISlower: _bindgen_ty_16 = 512;
pub const _ISalpha: _bindgen_ty_16 = 1024;
pub const _ISdigit: _bindgen_ty_16 = 2048;
pub const _ISxdigit: _bindgen_ty_16 = 4096;
pub const _ISspace: _bindgen_ty_16 = 8192;
pub const _ISprint: _bindgen_ty_16 = 16384;
pub const _ISgraph: _bindgen_ty_16 = 32768;
pub const _ISblank: _bindgen_ty_16 = 1;
pub const _IScntrl: _bindgen_ty_16 = 2;
pub const _ISpunct: _bindgen_ty_16 = 4;
pub const _ISalnum: _bindgen_ty_16 = 8;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toascii(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper_l(__c: ::std::os::raw::c_int, __l: locale_t) -> ::std::os::raw::c_int;
}
pub const DYNAMIC_TYPE_CA: _bindgen_ty_17 = 1;
pub const DYNAMIC_TYPE_CERT: _bindgen_ty_17 = 2;
pub const DYNAMIC_TYPE_KEY: _bindgen_ty_17 = 3;
pub const DYNAMIC_TYPE_FILE: _bindgen_ty_17 = 4;
pub const DYNAMIC_TYPE_SUBJECT_CN: _bindgen_ty_17 = 5;
pub const DYNAMIC_TYPE_PUBLIC_KEY: _bindgen_ty_17 = 6;
pub const DYNAMIC_TYPE_SIGNER: _bindgen_ty_17 = 7;
pub const DYNAMIC_TYPE_NONE: _bindgen_ty_17 = 8;
pub const DYNAMIC_TYPE_BIGINT: _bindgen_ty_17 = 9;
pub const DYNAMIC_TYPE_RSA: _bindgen_ty_17 = 10;
pub const DYNAMIC_TYPE_METHOD: _bindgen_ty_17 = 11;
pub const DYNAMIC_TYPE_OUT_BUFFER: _bindgen_ty_17 = 12;
pub const DYNAMIC_TYPE_IN_BUFFER: _bindgen_ty_17 = 13;
pub const DYNAMIC_TYPE_INFO: _bindgen_ty_17 = 14;
pub const DYNAMIC_TYPE_DH: _bindgen_ty_17 = 15;
pub const DYNAMIC_TYPE_DOMAIN: _bindgen_ty_17 = 16;
pub const DYNAMIC_TYPE_SSL: _bindgen_ty_17 = 17;
pub const DYNAMIC_TYPE_CTX: _bindgen_ty_17 = 18;
pub const DYNAMIC_TYPE_WRITEV: _bindgen_ty_17 = 19;
pub const DYNAMIC_TYPE_OPENSSL: _bindgen_ty_17 = 20;
pub const DYNAMIC_TYPE_DSA: _bindgen_ty_17 = 21;
pub const DYNAMIC_TYPE_CRL: _bindgen_ty_17 = 22;
pub const DYNAMIC_TYPE_REVOKED: _bindgen_ty_17 = 23;
pub const DYNAMIC_TYPE_CRL_ENTRY: _bindgen_ty_17 = 24;
pub const DYNAMIC_TYPE_CERT_MANAGER: _bindgen_ty_17 = 25;
pub const DYNAMIC_TYPE_CRL_MONITOR: _bindgen_ty_17 = 26;
pub const DYNAMIC_TYPE_OCSP_STATUS: _bindgen_ty_17 = 27;
pub const DYNAMIC_TYPE_OCSP_ENTRY: _bindgen_ty_17 = 28;
pub const DYNAMIC_TYPE_ALTNAME: _bindgen_ty_17 = 29;
pub const DYNAMIC_TYPE_SUITES: _bindgen_ty_17 = 30;
pub const DYNAMIC_TYPE_CIPHER: _bindgen_ty_17 = 31;
pub const DYNAMIC_TYPE_RNG: _bindgen_ty_17 = 32;
pub const DYNAMIC_TYPE_ARRAYS: _bindgen_ty_17 = 33;
pub const DYNAMIC_TYPE_DTLS_POOL: _bindgen_ty_17 = 34;
pub const DYNAMIC_TYPE_SOCKADDR: _bindgen_ty_17 = 35;
pub const DYNAMIC_TYPE_LIBZ: _bindgen_ty_17 = 36;
pub const DYNAMIC_TYPE_ECC: _bindgen_ty_17 = 37;
pub const DYNAMIC_TYPE_TMP_BUFFER: _bindgen_ty_17 = 38;
pub const DYNAMIC_TYPE_DTLS_MSG: _bindgen_ty_17 = 39;
pub const DYNAMIC_TYPE_X509: _bindgen_ty_17 = 40;
pub const DYNAMIC_TYPE_TLSX: _bindgen_ty_17 = 41;
pub const DYNAMIC_TYPE_OCSP: _bindgen_ty_17 = 42;
pub const DYNAMIC_TYPE_SIGNATURE: _bindgen_ty_17 = 43;
pub const DYNAMIC_TYPE_HASHES: _bindgen_ty_17 = 44;
pub const DYNAMIC_TYPE_SRP: _bindgen_ty_17 = 45;
pub const DYNAMIC_TYPE_COOKIE_PWD: _bindgen_ty_17 = 46;
pub const DYNAMIC_TYPE_USER_CRYPTO: _bindgen_ty_17 = 47;
pub const DYNAMIC_TYPE_OCSP_REQUEST: _bindgen_ty_17 = 48;
pub const DYNAMIC_TYPE_X509_EXT: _bindgen_ty_17 = 49;
pub const DYNAMIC_TYPE_X509_STORE: _bindgen_ty_17 = 50;
pub const DYNAMIC_TYPE_X509_CTX: _bindgen_ty_17 = 51;
pub const DYNAMIC_TYPE_URL: _bindgen_ty_17 = 52;
pub const DYNAMIC_TYPE_DTLS_FRAG: _bindgen_ty_17 = 53;
pub const DYNAMIC_TYPE_DTLS_BUFFER: _bindgen_ty_17 = 54;
pub const DYNAMIC_TYPE_SESSION_TICK: _bindgen_ty_17 = 55;
pub const DYNAMIC_TYPE_PKCS: _bindgen_ty_17 = 56;
pub const DYNAMIC_TYPE_MUTEX: _bindgen_ty_17 = 57;
pub const DYNAMIC_TYPE_PKCS7: _bindgen_ty_17 = 58;
pub const DYNAMIC_TYPE_AES_BUFFER: _bindgen_ty_17 = 59;
pub const DYNAMIC_TYPE_WOLF_BIGINT: _bindgen_ty_17 = 60;
pub const DYNAMIC_TYPE_ASN1: _bindgen_ty_17 = 61;
pub const DYNAMIC_TYPE_LOG: _bindgen_ty_17 = 62;
pub const DYNAMIC_TYPE_WRITEDUP: _bindgen_ty_17 = 63;
pub const DYNAMIC_TYPE_PRIVATE_KEY: _bindgen_ty_17 = 64;
pub const DYNAMIC_TYPE_HMAC: _bindgen_ty_17 = 65;
pub const DYNAMIC_TYPE_ASYNC: _bindgen_ty_17 = 66;
pub const DYNAMIC_TYPE_ASYNC_NUMA: _bindgen_ty_17 = 67;
pub const DYNAMIC_TYPE_ASYNC_NUMA64: _bindgen_ty_17 = 68;
pub const DYNAMIC_TYPE_CURVE25519: _bindgen_ty_17 = 69;
pub const DYNAMIC_TYPE_ED25519: _bindgen_ty_17 = 70;
pub const DYNAMIC_TYPE_SECRET: _bindgen_ty_17 = 71;
pub const DYNAMIC_TYPE_DIGEST: _bindgen_ty_17 = 72;
pub const DYNAMIC_TYPE_RSA_BUFFER: _bindgen_ty_17 = 73;
pub const DYNAMIC_TYPE_DCERT: _bindgen_ty_17 = 74;
pub const DYNAMIC_TYPE_STRING: _bindgen_ty_17 = 75;
pub const DYNAMIC_TYPE_PEM: _bindgen_ty_17 = 76;
pub const DYNAMIC_TYPE_DER: _bindgen_ty_17 = 77;
pub const DYNAMIC_TYPE_CERT_EXT: _bindgen_ty_17 = 78;
pub const DYNAMIC_TYPE_ALPN: _bindgen_ty_17 = 79;
pub const DYNAMIC_TYPE_ENCRYPTEDINFO: _bindgen_ty_17 = 80;
pub const DYNAMIC_TYPE_DIRCTX: _bindgen_ty_17 = 81;
pub const DYNAMIC_TYPE_HASHCTX: _bindgen_ty_17 = 82;
pub const DYNAMIC_TYPE_SEED: _bindgen_ty_17 = 83;
pub const DYNAMIC_TYPE_SYMMETRIC_KEY: _bindgen_ty_17 = 84;
pub const DYNAMIC_TYPE_ECC_BUFFER: _bindgen_ty_17 = 85;
pub const DYNAMIC_TYPE_SALT: _bindgen_ty_17 = 87;
pub const DYNAMIC_TYPE_HASH_TMP: _bindgen_ty_17 = 88;
pub const DYNAMIC_TYPE_BLOB: _bindgen_ty_17 = 89;
pub const DYNAMIC_TYPE_NAME_ENTRY: _bindgen_ty_17 = 90;
pub const DYNAMIC_TYPE_CURVE448: _bindgen_ty_17 = 91;
pub const DYNAMIC_TYPE_ED448: _bindgen_ty_17 = 92;
pub const DYNAMIC_TYPE_AES: _bindgen_ty_17 = 93;
pub const DYNAMIC_TYPE_CMAC: _bindgen_ty_17 = 94;
pub const DYNAMIC_TYPE_FALCON: _bindgen_ty_17 = 95;
pub const DYNAMIC_TYPE_SESSION: _bindgen_ty_17 = 96;
pub const DYNAMIC_TYPE_DILITHIUM: _bindgen_ty_17 = 97;
pub const DYNAMIC_TYPE_SPHINCS: _bindgen_ty_17 = 98;
pub const DYNAMIC_TYPE_SM4_BUFFER: _bindgen_ty_17 = 99;
pub const DYNAMIC_TYPE_DEBUG_TAG: _bindgen_ty_17 = 100;
pub const DYNAMIC_TYPE_LMS: _bindgen_ty_17 = 101;
pub const DYNAMIC_TYPE_SNIFFER_SERVER: _bindgen_ty_17 = 1000;
pub const DYNAMIC_TYPE_SNIFFER_SESSION: _bindgen_ty_17 = 1001;
pub const DYNAMIC_TYPE_SNIFFER_PB: _bindgen_ty_17 = 1002;
pub const DYNAMIC_TYPE_SNIFFER_PB_BUFFER: _bindgen_ty_17 = 1003;
pub const DYNAMIC_TYPE_SNIFFER_TICKET_ID: _bindgen_ty_17 = 1004;
pub const DYNAMIC_TYPE_SNIFFER_NAMED_KEY: _bindgen_ty_17 = 1005;
pub const DYNAMIC_TYPE_SNIFFER_KEY: _bindgen_ty_17 = 1006;
pub const DYNAMIC_TYPE_SNIFFER_KEYLOG_NODE: _bindgen_ty_17 = 1007;
pub const DYNAMIC_TYPE_AES_EAX: _bindgen_ty_17 = 1008;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const MIN_STACK_BUFFER: _bindgen_ty_18 = 8;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const wc_AlgoType_WC_ALGO_TYPE_NONE: wc_AlgoType = 0;
pub const wc_AlgoType_WC_ALGO_TYPE_HASH: wc_AlgoType = 1;
pub const wc_AlgoType_WC_ALGO_TYPE_CIPHER: wc_AlgoType = 2;
pub const wc_AlgoType_WC_ALGO_TYPE_PK: wc_AlgoType = 3;
pub const wc_AlgoType_WC_ALGO_TYPE_RNG: wc_AlgoType = 4;
pub const wc_AlgoType_WC_ALGO_TYPE_SEED: wc_AlgoType = 5;
pub const wc_AlgoType_WC_ALGO_TYPE_HMAC: wc_AlgoType = 6;
pub const wc_AlgoType_WC_ALGO_TYPE_CMAC: wc_AlgoType = 7;
pub const wc_AlgoType_WC_ALGO_TYPE_MAX: wc_AlgoType = 7;
pub type wc_AlgoType = ::std::os::raw::c_uint;
pub const wc_HashType_WC_HASH_TYPE_NONE: wc_HashType = 0;
pub const wc_HashType_WC_HASH_TYPE_MD2: wc_HashType = 1;
pub const wc_HashType_WC_HASH_TYPE_MD4: wc_HashType = 2;
pub const wc_HashType_WC_HASH_TYPE_MD5: wc_HashType = 3;
pub const wc_HashType_WC_HASH_TYPE_SHA: wc_HashType = 4;
pub const wc_HashType_WC_HASH_TYPE_SHA224: wc_HashType = 5;
pub const wc_HashType_WC_HASH_TYPE_SHA256: wc_HashType = 6;
pub const wc_HashType_WC_HASH_TYPE_SHA384: wc_HashType = 7;
pub const wc_HashType_WC_HASH_TYPE_SHA512: wc_HashType = 8;
pub const wc_HashType_WC_HASH_TYPE_MD5_SHA: wc_HashType = 9;
pub const wc_HashType_WC_HASH_TYPE_SHA3_224: wc_HashType = 10;
pub const wc_HashType_WC_HASH_TYPE_SHA3_256: wc_HashType = 11;
pub const wc_HashType_WC_HASH_TYPE_SHA3_384: wc_HashType = 12;
pub const wc_HashType_WC_HASH_TYPE_SHA3_512: wc_HashType = 13;
pub const wc_HashType_WC_HASH_TYPE_BLAKE2B: wc_HashType = 14;
pub const wc_HashType_WC_HASH_TYPE_BLAKE2S: wc_HashType = 15;
pub const wc_HashType_WC_HASH_TYPE_SHA512_224: wc_HashType = 16;
pub const wc_HashType_WC_HASH_TYPE_SHA512_256: wc_HashType = 17;
pub const wc_HashType_WC_HASH_TYPE_MAX: wc_HashType = 17;
pub type wc_HashType = ::std::os::raw::c_uint;
pub const wc_CipherType_WC_CIPHER_NONE: wc_CipherType = 0;
pub const wc_CipherType_WC_CIPHER_AES: wc_CipherType = 1;
pub const wc_CipherType_WC_CIPHER_AES_CBC: wc_CipherType = 2;
pub const wc_CipherType_WC_CIPHER_AES_GCM: wc_CipherType = 3;
pub const wc_CipherType_WC_CIPHER_AES_CTR: wc_CipherType = 4;
pub const wc_CipherType_WC_CIPHER_AES_XTS: wc_CipherType = 5;
pub const wc_CipherType_WC_CIPHER_AES_CFB: wc_CipherType = 6;
pub const wc_CipherType_WC_CIPHER_AES_CCM: wc_CipherType = 12;
pub const wc_CipherType_WC_CIPHER_AES_ECB: wc_CipherType = 13;
pub const wc_CipherType_WC_CIPHER_DES3: wc_CipherType = 7;
pub const wc_CipherType_WC_CIPHER_DES: wc_CipherType = 8;
pub const wc_CipherType_WC_CIPHER_CHACHA: wc_CipherType = 9;
pub const wc_CipherType_WC_CIPHER_MAX: wc_CipherType = 12;
pub type wc_CipherType = ::std::os::raw::c_uint;
pub const wc_PkType_WC_PK_TYPE_NONE: wc_PkType = 0;
pub const wc_PkType_WC_PK_TYPE_RSA: wc_PkType = 1;
pub const wc_PkType_WC_PK_TYPE_DH: wc_PkType = 2;
pub const wc_PkType_WC_PK_TYPE_ECDH: wc_PkType = 3;
pub const wc_PkType_WC_PK_TYPE_ECDSA_SIGN: wc_PkType = 4;
pub const wc_PkType_WC_PK_TYPE_ECDSA_VERIFY: wc_PkType = 5;
pub const wc_PkType_WC_PK_TYPE_ED25519_SIGN: wc_PkType = 6;
pub const wc_PkType_WC_PK_TYPE_CURVE25519: wc_PkType = 7;
pub const wc_PkType_WC_PK_TYPE_RSA_KEYGEN: wc_PkType = 8;
pub const wc_PkType_WC_PK_TYPE_EC_KEYGEN: wc_PkType = 9;
pub const wc_PkType_WC_PK_TYPE_RSA_CHECK_PRIV_KEY: wc_PkType = 10;
pub const wc_PkType_WC_PK_TYPE_EC_CHECK_PRIV_KEY: wc_PkType = 11;
pub const wc_PkType_WC_PK_TYPE_ED448: wc_PkType = 12;
pub const wc_PkType_WC_PK_TYPE_CURVE448: wc_PkType = 13;
pub const wc_PkType_WC_PK_TYPE_ED25519_VERIFY: wc_PkType = 14;
pub const wc_PkType_WC_PK_TYPE_ED25519_KEYGEN: wc_PkType = 15;
pub const wc_PkType_WC_PK_TYPE_CURVE25519_KEYGEN: wc_PkType = 16;
pub const wc_PkType_WC_PK_TYPE_RSA_GET_SIZE: wc_PkType = 17;
pub const wc_PkType_WC_PK_TYPE_MAX: wc_PkType = 17;
pub type wc_PkType = ::std::os::raw::c_uint;
pub const CTC_SETTINGS: _bindgen_ty_19 = 1;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
extern "C" {
    pub fn CheckRunTimeSettings() -> word32;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct COND_TYPE {
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
}
#[test]
fn bindgen_test_layout_COND_TYPE() {
    const UNINIT: ::std::mem::MaybeUninit<COND_TYPE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<COND_TYPE>(),
        88usize,
        concat!("Size of: ", stringify!(COND_TYPE))
    );
    assert_eq!(
        ::std::mem::align_of::<COND_TYPE>(),
        8usize,
        concat!("Alignment of ", stringify!(COND_TYPE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(COND_TYPE),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(COND_TYPE),
            "::",
            stringify!(cond)
        )
    );
}
pub type THREAD_RETURN = *mut ::std::os::raw::c_void;
pub type THREAD_TYPE = pthread_t;
pub type THREAD_CB =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void) -> THREAD_RETURN>;
extern "C" {
    pub fn wolfSSL_NewThread(
        thread: *mut THREAD_TYPE,
        cb: THREAD_CB,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type THREAD_CB_NOJOIN =
    ::std::option::Option<unsafe extern "C" fn(arg: *mut ::std::os::raw::c_void) -> THREAD_RETURN>;
extern "C" {
    pub fn wolfSSL_NewThreadNoJoin(
        cb: THREAD_CB_NOJOIN,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_JoinThread(thread: THREAD_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CondInit(cond: *mut COND_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CondFree(cond: *mut COND_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CondSignal(cond: *mut COND_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CondWait(cond: *mut COND_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CondStart(cond: *mut COND_TYPE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wolfSSL_CondEnd(cond: *mut COND_TYPE) -> ::std::os::raw::c_int;
}
pub const MAX_CODE_E: _bindgen_ty_20 = -100;
pub const OPEN_RAN_E: _bindgen_ty_20 = -101;
pub const READ_RAN_E: _bindgen_ty_20 = -102;
pub const WINCRYPT_E: _bindgen_ty_20 = -103;
pub const CRYPTGEN_E: _bindgen_ty_20 = -104;
pub const RAN_BLOCK_E: _bindgen_ty_20 = -105;
pub const BAD_MUTEX_E: _bindgen_ty_20 = -106;
pub const WC_TIMEOUT_E: _bindgen_ty_20 = -107;
pub const WC_PENDING_E: _bindgen_ty_20 = -108;
pub const WC_NO_PENDING_E: _bindgen_ty_20 = -109;
pub const MP_INIT_E: _bindgen_ty_20 = -110;
pub const MP_READ_E: _bindgen_ty_20 = -111;
pub const MP_EXPTMOD_E: _bindgen_ty_20 = -112;
pub const MP_TO_E: _bindgen_ty_20 = -113;
pub const MP_SUB_E: _bindgen_ty_20 = -114;
pub const MP_ADD_E: _bindgen_ty_20 = -115;
pub const MP_MUL_E: _bindgen_ty_20 = -116;
pub const MP_MULMOD_E: _bindgen_ty_20 = -117;
pub const MP_MOD_E: _bindgen_ty_20 = -118;
pub const MP_INVMOD_E: _bindgen_ty_20 = -119;
pub const MP_CMP_E: _bindgen_ty_20 = -120;
pub const MP_ZERO_E: _bindgen_ty_20 = -121;
pub const AES_EAX_AUTH_E: _bindgen_ty_20 = -122;
pub const KEY_EXHAUSTED_E: _bindgen_ty_20 = -123;
pub const MEMORY_E: _bindgen_ty_20 = -125;
pub const VAR_STATE_CHANGE_E: _bindgen_ty_20 = -126;
pub const FIPS_DEGRADED_E: _bindgen_ty_20 = -127;
pub const FIPS_CODE_SZ_E: _bindgen_ty_20 = -128;
pub const FIPS_DATA_SZ_E: _bindgen_ty_20 = -129;
pub const RSA_WRONG_TYPE_E: _bindgen_ty_20 = -130;
pub const RSA_BUFFER_E: _bindgen_ty_20 = -131;
pub const BUFFER_E: _bindgen_ty_20 = -132;
pub const ALGO_ID_E: _bindgen_ty_20 = -133;
pub const PUBLIC_KEY_E: _bindgen_ty_20 = -134;
pub const DATE_E: _bindgen_ty_20 = -135;
pub const SUBJECT_E: _bindgen_ty_20 = -136;
pub const ISSUER_E: _bindgen_ty_20 = -137;
pub const CA_TRUE_E: _bindgen_ty_20 = -138;
pub const EXTENSIONS_E: _bindgen_ty_20 = -139;
pub const ASN_PARSE_E: _bindgen_ty_20 = -140;
pub const ASN_VERSION_E: _bindgen_ty_20 = -141;
pub const ASN_GETINT_E: _bindgen_ty_20 = -142;
pub const ASN_RSA_KEY_E: _bindgen_ty_20 = -143;
pub const ASN_OBJECT_ID_E: _bindgen_ty_20 = -144;
pub const ASN_TAG_NULL_E: _bindgen_ty_20 = -145;
pub const ASN_EXPECT_0_E: _bindgen_ty_20 = -146;
pub const ASN_BITSTR_E: _bindgen_ty_20 = -147;
pub const ASN_UNKNOWN_OID_E: _bindgen_ty_20 = -148;
pub const ASN_DATE_SZ_E: _bindgen_ty_20 = -149;
pub const ASN_BEFORE_DATE_E: _bindgen_ty_20 = -150;
pub const ASN_AFTER_DATE_E: _bindgen_ty_20 = -151;
pub const ASN_SIG_OID_E: _bindgen_ty_20 = -152;
pub const ASN_TIME_E: _bindgen_ty_20 = -153;
pub const ASN_INPUT_E: _bindgen_ty_20 = -154;
pub const ASN_SIG_CONFIRM_E: _bindgen_ty_20 = -155;
pub const ASN_SIG_HASH_E: _bindgen_ty_20 = -156;
pub const ASN_SIG_KEY_E: _bindgen_ty_20 = -157;
pub const ASN_DH_KEY_E: _bindgen_ty_20 = -158;
pub const KDF_SRTP_KAT_FIPS_E: _bindgen_ty_20 = -159;
pub const ASN_CRIT_EXT_E: _bindgen_ty_20 = -160;
pub const ASN_ALT_NAME_E: _bindgen_ty_20 = -161;
pub const ASN_NO_PEM_HEADER: _bindgen_ty_20 = -162;
pub const ED25519_KAT_FIPS_E: _bindgen_ty_20 = -163;
pub const ED448_KAT_FIPS_E: _bindgen_ty_20 = -164;
pub const PBKDF2_KAT_FIPS_E: _bindgen_ty_20 = -165;
pub const ECC_BAD_ARG_E: _bindgen_ty_20 = -170;
pub const ASN_ECC_KEY_E: _bindgen_ty_20 = -171;
pub const ECC_CURVE_OID_E: _bindgen_ty_20 = -172;
pub const BAD_FUNC_ARG: _bindgen_ty_20 = -173;
pub const NOT_COMPILED_IN: _bindgen_ty_20 = -174;
pub const UNICODE_SIZE_E: _bindgen_ty_20 = -175;
pub const NO_PASSWORD: _bindgen_ty_20 = -176;
pub const ALT_NAME_E: _bindgen_ty_20 = -177;
pub const BAD_OCSP_RESPONDER: _bindgen_ty_20 = -178;
pub const CRL_CERT_DATE_ERR: _bindgen_ty_20 = -179;
pub const AES_GCM_AUTH_E: _bindgen_ty_20 = -180;
pub const AES_CCM_AUTH_E: _bindgen_ty_20 = -181;
pub const ASYNC_INIT_E: _bindgen_ty_20 = -182;
pub const COMPRESS_INIT_E: _bindgen_ty_20 = -183;
pub const COMPRESS_E: _bindgen_ty_20 = -184;
pub const DECOMPRESS_INIT_E: _bindgen_ty_20 = -185;
pub const DECOMPRESS_E: _bindgen_ty_20 = -186;
pub const BAD_ALIGN_E: _bindgen_ty_20 = -187;
pub const ASN_NO_SIGNER_E: _bindgen_ty_20 = -188;
pub const ASN_CRL_CONFIRM_E: _bindgen_ty_20 = -189;
pub const ASN_CRL_NO_SIGNER_E: _bindgen_ty_20 = -190;
pub const ASN_OCSP_CONFIRM_E: _bindgen_ty_20 = -191;
pub const BAD_STATE_E: _bindgen_ty_20 = -192;
pub const BAD_PADDING_E: _bindgen_ty_20 = -193;
pub const REQ_ATTRIBUTE_E: _bindgen_ty_20 = -194;
pub const PKCS7_OID_E: _bindgen_ty_20 = -195;
pub const PKCS7_RECIP_E: _bindgen_ty_20 = -196;
pub const FIPS_NOT_ALLOWED_E: _bindgen_ty_20 = -197;
pub const ASN_NAME_INVALID_E: _bindgen_ty_20 = -198;
pub const RNG_FAILURE_E: _bindgen_ty_20 = -199;
pub const HMAC_MIN_KEYLEN_E: _bindgen_ty_20 = -200;
pub const RSA_PAD_E: _bindgen_ty_20 = -201;
pub const LENGTH_ONLY_E: _bindgen_ty_20 = -202;
pub const IN_CORE_FIPS_E: _bindgen_ty_20 = -203;
pub const AES_KAT_FIPS_E: _bindgen_ty_20 = -204;
pub const DES3_KAT_FIPS_E: _bindgen_ty_20 = -205;
pub const HMAC_KAT_FIPS_E: _bindgen_ty_20 = -206;
pub const RSA_KAT_FIPS_E: _bindgen_ty_20 = -207;
pub const DRBG_KAT_FIPS_E: _bindgen_ty_20 = -208;
pub const DRBG_CONT_FIPS_E: _bindgen_ty_20 = -209;
pub const AESGCM_KAT_FIPS_E: _bindgen_ty_20 = -210;
pub const THREAD_STORE_KEY_E: _bindgen_ty_20 = -211;
pub const THREAD_STORE_SET_E: _bindgen_ty_20 = -212;
pub const MAC_CMP_FAILED_E: _bindgen_ty_20 = -213;
pub const IS_POINT_E: _bindgen_ty_20 = -214;
pub const ECC_INF_E: _bindgen_ty_20 = -215;
pub const ECC_PRIV_KEY_E: _bindgen_ty_20 = -216;
pub const ECC_OUT_OF_RANGE_E: _bindgen_ty_20 = -217;
pub const SRP_CALL_ORDER_E: _bindgen_ty_20 = -218;
pub const SRP_VERIFY_E: _bindgen_ty_20 = -219;
pub const SRP_BAD_KEY_E: _bindgen_ty_20 = -220;
pub const ASN_NO_SKID: _bindgen_ty_20 = -221;
pub const ASN_NO_AKID: _bindgen_ty_20 = -222;
pub const ASN_NO_KEYUSAGE: _bindgen_ty_20 = -223;
pub const SKID_E: _bindgen_ty_20 = -224;
pub const AKID_E: _bindgen_ty_20 = -225;
pub const KEYUSAGE_E: _bindgen_ty_20 = -226;
pub const CERTPOLICIES_E: _bindgen_ty_20 = -227;
pub const WC_INIT_E: _bindgen_ty_20 = -228;
pub const SIG_VERIFY_E: _bindgen_ty_20 = -229;
pub const BAD_COND_E: _bindgen_ty_20 = -230;
pub const SIG_TYPE_E: _bindgen_ty_20 = -231;
pub const HASH_TYPE_E: _bindgen_ty_20 = -232;
pub const FIPS_INVALID_VER_E: _bindgen_ty_20 = -233;
pub const WC_KEY_SIZE_E: _bindgen_ty_20 = -234;
pub const ASN_COUNTRY_SIZE_E: _bindgen_ty_20 = -235;
pub const MISSING_RNG_E: _bindgen_ty_20 = -236;
pub const ASN_PATHLEN_SIZE_E: _bindgen_ty_20 = -237;
pub const ASN_PATHLEN_INV_E: _bindgen_ty_20 = -238;
pub const BAD_KEYWRAP_ALG_E: _bindgen_ty_20 = -239;
pub const BAD_KEYWRAP_IV_E: _bindgen_ty_20 = -240;
pub const WC_CLEANUP_E: _bindgen_ty_20 = -241;
pub const ECC_CDH_KAT_FIPS_E: _bindgen_ty_20 = -242;
pub const DH_CHECK_PUB_E: _bindgen_ty_20 = -243;
pub const BAD_PATH_ERROR: _bindgen_ty_20 = -244;
pub const ASYNC_OP_E: _bindgen_ty_20 = -245;
pub const ECC_PRIVATEONLY_E: _bindgen_ty_20 = -246;
pub const EXTKEYUSAGE_E: _bindgen_ty_20 = -247;
pub const WC_HW_E: _bindgen_ty_20 = -248;
pub const WC_HW_WAIT_E: _bindgen_ty_20 = -249;
pub const PSS_SALTLEN_E: _bindgen_ty_20 = -250;
pub const PRIME_GEN_E: _bindgen_ty_20 = -251;
pub const BER_INDEF_E: _bindgen_ty_20 = -252;
pub const RSA_OUT_OF_RANGE_E: _bindgen_ty_20 = -253;
pub const RSAPSS_PAT_FIPS_E: _bindgen_ty_20 = -254;
pub const ECDSA_PAT_FIPS_E: _bindgen_ty_20 = -255;
pub const DH_KAT_FIPS_E: _bindgen_ty_20 = -256;
pub const AESCCM_KAT_FIPS_E: _bindgen_ty_20 = -257;
pub const SHA3_KAT_FIPS_E: _bindgen_ty_20 = -258;
pub const ECDHE_KAT_FIPS_E: _bindgen_ty_20 = -259;
pub const AES_GCM_OVERFLOW_E: _bindgen_ty_20 = -260;
pub const AES_CCM_OVERFLOW_E: _bindgen_ty_20 = -261;
pub const RSA_KEY_PAIR_E: _bindgen_ty_20 = -262;
pub const DH_CHECK_PRIV_E: _bindgen_ty_20 = -263;
pub const WC_AFALG_SOCK_E: _bindgen_ty_20 = -264;
pub const WC_DEVCRYPTO_E: _bindgen_ty_20 = -265;
pub const ZLIB_INIT_ERROR: _bindgen_ty_20 = -266;
pub const ZLIB_COMPRESS_ERROR: _bindgen_ty_20 = -267;
pub const ZLIB_DECOMPRESS_ERROR: _bindgen_ty_20 = -268;
pub const PKCS7_NO_SIGNER_E: _bindgen_ty_20 = -269;
pub const WC_PKCS7_WANT_READ_E: _bindgen_ty_20 = -270;
pub const CRYPTOCB_UNAVAILABLE: _bindgen_ty_20 = -271;
pub const PKCS7_SIGNEEDS_CHECK: _bindgen_ty_20 = -272;
pub const PSS_SALTLEN_RECOVER_E: _bindgen_ty_20 = -273;
pub const CHACHA_POLY_OVERFLOW: _bindgen_ty_20 = -274;
pub const ASN_SELF_SIGNED_E: _bindgen_ty_20 = -275;
pub const SAKKE_VERIFY_FAIL_E: _bindgen_ty_20 = -276;
pub const MISSING_IV: _bindgen_ty_20 = -277;
pub const MISSING_KEY: _bindgen_ty_20 = -278;
pub const BAD_LENGTH_E: _bindgen_ty_20 = -279;
pub const ECDSA_KAT_FIPS_E: _bindgen_ty_20 = -280;
pub const RSA_PAT_FIPS_E: _bindgen_ty_20 = -281;
pub const KDF_TLS12_KAT_FIPS_E: _bindgen_ty_20 = -282;
pub const KDF_TLS13_KAT_FIPS_E: _bindgen_ty_20 = -283;
pub const KDF_SSH_KAT_FIPS_E: _bindgen_ty_20 = -284;
pub const DHE_PCT_E: _bindgen_ty_20 = -285;
pub const ECC_PCT_E: _bindgen_ty_20 = -286;
pub const FIPS_PRIVATE_KEY_LOCKED_E: _bindgen_ty_20 = -287;
pub const PROTOCOLCB_UNAVAILABLE: _bindgen_ty_20 = -288;
pub const AES_SIV_AUTH_E: _bindgen_ty_20 = -289;
pub const NO_VALID_DEVID: _bindgen_ty_20 = -290;
pub const IO_FAILED_E: _bindgen_ty_20 = -291;
pub const SYSLIB_FAILED_E: _bindgen_ty_20 = -292;
pub const USE_HW_PSK: _bindgen_ty_20 = -293;
pub const ENTROPY_RT_E: _bindgen_ty_20 = -294;
pub const ENTROPY_APT_E: _bindgen_ty_20 = -295;
pub const ASN_DEPTH_E: _bindgen_ty_20 = -296;
pub const ASN_LEN_E: _bindgen_ty_20 = -297;
pub const SM4_GCM_AUTH_E: _bindgen_ty_20 = -298;
pub const SM4_CCM_AUTH_E: _bindgen_ty_20 = -299;
pub const WC_LAST_E: _bindgen_ty_20 = -299;
pub const MIN_CODE_E: _bindgen_ty_20 = -300;
pub type _bindgen_ty_20 = ::std::os::raw::c_int;
extern "C" {
    pub fn wc_ErrorString(err: ::std::os::raw::c_int, buff: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn wc_GetErrorString(error: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
pub const WC_SHA256: _bindgen_ty_21 = 6;
pub const WC_SHA256_BLOCK_SIZE: _bindgen_ty_21 = 64;
pub const WC_SHA256_DIGEST_SIZE: _bindgen_ty_21 = 32;
pub const WC_SHA256_PAD_SIZE: _bindgen_ty_21 = 56;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wc_Sha256 {
    pub digest: [word32; 8usize],
    pub buffer: [word32; 16usize],
    pub buffLen: word32,
    pub loLen: word32,
    pub hiLen: word32,
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wc_Sha256() {
    const UNINIT: ::std::mem::MaybeUninit<wc_Sha256> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wc_Sha256>(),
        120usize,
        concat!("Size of: ", stringify!(wc_Sha256))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_Sha256>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_Sha256))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffLen) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(buffLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loLen) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(loLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiLen) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(hiLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha256),
            "::",
            stringify!(heap)
        )
    );
}
extern "C" {
    pub fn wc_InitSha256(sha: *mut wc_Sha256) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitSha256_ex(
        sha: *mut wc_Sha256,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Update(
        sha: *mut wc_Sha256,
        data: *const byte,
        len: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256FinalRaw(sha256: *mut wc_Sha256, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Final(sha256: *mut wc_Sha256, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Free(sha256: *mut wc_Sha256);
}
extern "C" {
    pub fn wc_Sha256GetHash(sha256: *mut wc_Sha256, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Copy(src: *mut wc_Sha256, dst: *mut wc_Sha256) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OS_Seed {
    pub fd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_OS_Seed() {
    const UNINIT: ::std::mem::MaybeUninit<OS_Seed> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<OS_Seed>(),
        4usize,
        concat!("Size of: ", stringify!(OS_Seed))
    );
    assert_eq!(
        ::std::mem::align_of::<OS_Seed>(),
        4usize,
        concat!("Alignment of ", stringify!(OS_Seed))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OS_Seed),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRBG_internal {
    pub reseedCtr: word32,
    pub V: [byte; 55usize],
    pub C: [byte; 55usize],
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DRBG_internal() {
    const UNINIT: ::std::mem::MaybeUninit<DRBG_internal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DRBG_internal>(),
        128usize,
        concat!("Size of: ", stringify!(DRBG_internal))
    );
    assert_eq!(
        ::std::mem::align_of::<DRBG_internal>(),
        8usize,
        concat!("Alignment of ", stringify!(DRBG_internal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reseedCtr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DRBG_internal),
            "::",
            stringify!(reseedCtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).V) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(DRBG_internal),
            "::",
            stringify!(V)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).C) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(DRBG_internal),
            "::",
            stringify!(C)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(DRBG_internal),
            "::",
            stringify!(heap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WC_RNG {
    pub seed: OS_Seed,
    pub heap: *mut ::std::os::raw::c_void,
    pub drbg: *mut DRBG,
    pub status: byte,
}
#[test]
fn bindgen_test_layout_WC_RNG() {
    const UNINIT: ::std::mem::MaybeUninit<WC_RNG> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WC_RNG>(),
        32usize,
        concat!("Size of: ", stringify!(WC_RNG))
    );
    assert_eq!(
        ::std::mem::align_of::<WC_RNG>(),
        8usize,
        concat!("Alignment of ", stringify!(WC_RNG))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drbg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(drbg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WC_RNG),
            "::",
            stringify!(status)
        )
    );
}
extern "C" {
    pub fn wc_GenerateSeed(os: *mut OS_Seed, seed: *mut byte, sz: word32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_rng_new(
        nonce: *mut byte,
        nonceSz: word32,
        heap: *mut ::std::os::raw::c_void,
    ) -> *mut WC_RNG;
}
extern "C" {
    pub fn wc_rng_new_ex(
        rng: *mut *mut WC_RNG,
        nonce: *mut byte,
        nonceSz: word32,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_rng_free(rng: *mut WC_RNG);
}
extern "C" {
    pub fn wc_InitRng(rng: *mut WC_RNG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitRng_ex(
        rng: *mut WC_RNG,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitRngNonce(
        rng: *mut WC_RNG,
        nonce: *mut byte,
        nonceSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitRngNonce_ex(
        rng: *mut WC_RNG,
        nonce: *mut byte,
        nonceSz: word32,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_GenerateBlock(
        rng: *mut WC_RNG,
        b: *mut byte,
        sz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_GenerateByte(rng: *mut WC_RNG, b: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FreeRng(rng: *mut WC_RNG) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_DRBG_Reseed(
        rng: *mut WC_RNG,
        entropy: *const byte,
        entropySz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_TestSeed(seed: *const byte, seedSz: word32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_HealthTest(
        reseed: ::std::os::raw::c_int,
        entropyA: *const byte,
        entropyASz: word32,
        entropyB: *const byte,
        entropyBSz: word32,
        output: *mut byte,
        outputSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RNG_HealthTest_ex(
        reseed: ::std::os::raw::c_int,
        nonce: *const byte,
        nonceSz: word32,
        entropyA: *const byte,
        entropyASz: word32,
        entropyB: *const byte,
        entropyBSz: word32,
        output: *mut byte,
        outputSz: word32,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const WC_MD5: _bindgen_ty_22 = 3;
pub const WC_MD5_BLOCK_SIZE: _bindgen_ty_22 = 64;
pub const WC_MD5_DIGEST_SIZE: _bindgen_ty_22 = 16;
pub const WC_MD5_PAD_SIZE: _bindgen_ty_22 = 56;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wc_Md5 {
    pub buffLen: word32,
    pub loLen: word32,
    pub hiLen: word32,
    pub buffer: [word32; 16usize],
    pub digest: [word32; 4usize],
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wc_Md5() {
    const UNINIT: ::std::mem::MaybeUninit<wc_Md5> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wc_Md5>(),
        104usize,
        concat!("Size of: ", stringify!(wc_Md5))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_Md5>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_Md5))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(buffLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loLen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(loLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(hiLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Md5),
            "::",
            stringify!(heap)
        )
    );
}
extern "C" {
    pub fn wc_InitMd5(md5: *mut wc_Md5) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitMd5_ex(
        md5: *mut wc_Md5,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Update(md5: *mut wc_Md5, data: *const byte, len: word32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Final(md5: *mut wc_Md5, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Free(md5: *mut wc_Md5);
}
extern "C" {
    pub fn wc_Md5GetHash(md5: *mut wc_Md5, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Copy(src: *mut wc_Md5, dst: *mut wc_Md5) -> ::std::os::raw::c_int;
}
pub const WC_SHA: _bindgen_ty_23 = 4;
pub const WC_SHA_BLOCK_SIZE: _bindgen_ty_23 = 64;
pub const WC_SHA_DIGEST_SIZE: _bindgen_ty_23 = 20;
pub const WC_SHA_PAD_SIZE: _bindgen_ty_23 = 56;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wc_Sha {
    pub buffLen: word32,
    pub loLen: word32,
    pub hiLen: word32,
    pub buffer: [word32; 16usize],
    pub digest: [word32; 5usize],
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_wc_Sha() {
    const UNINIT: ::std::mem::MaybeUninit<wc_Sha> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wc_Sha>(),
        104usize,
        concat!("Size of: ", stringify!(wc_Sha))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_Sha>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_Sha))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(buffLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loLen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(loLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(hiLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_Sha),
            "::",
            stringify!(heap)
        )
    );
}
extern "C" {
    pub fn wc_InitSha(sha: *mut wc_Sha) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitSha_ex(
        sha: *mut wc_Sha,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaUpdate(sha: *mut wc_Sha, data: *const byte, len: word32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaFinalRaw(sha: *mut wc_Sha, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaFinal(sha: *mut wc_Sha, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaFree(sha: *mut wc_Sha);
}
extern "C" {
    pub fn wc_ShaGetHash(sha: *mut wc_Sha, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaCopy(src: *mut wc_Sha, dst: *mut wc_Sha) -> ::std::os::raw::c_int;
}
pub const MD4: _bindgen_ty_24 = 2;
pub const MD4_BLOCK_SIZE: _bindgen_ty_24 = 64;
pub const MD4_DIGEST_SIZE: _bindgen_ty_24 = 16;
pub const MD4_PAD_SIZE: _bindgen_ty_24 = 56;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Md4 {
    pub buffLen: word32,
    pub loLen: word32,
    pub hiLen: word32,
    pub digest: [word32; 4usize],
    pub buffer: [word32; 16usize],
}
#[test]
fn bindgen_test_layout_Md4() {
    const UNINIT: ::std::mem::MaybeUninit<Md4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Md4>(),
        92usize,
        concat!("Size of: ", stringify!(Md4))
    );
    assert_eq!(
        ::std::mem::align_of::<Md4>(),
        4usize,
        concat!("Alignment of ", stringify!(Md4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffLen) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Md4),
            "::",
            stringify!(buffLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loLen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Md4),
            "::",
            stringify!(loLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hiLen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Md4),
            "::",
            stringify!(hiLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).digest) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Md4),
            "::",
            stringify!(digest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Md4),
            "::",
            stringify!(buffer)
        )
    );
}
extern "C" {
    pub fn wc_InitMd4(md4: *mut Md4);
}
extern "C" {
    pub fn wc_Md4Update(md4: *mut Md4, data: *const byte, len: word32);
}
extern "C" {
    pub fn wc_Md4Final(md4: *mut Md4, hash: *mut byte);
}
pub const wc_MACAlgorithm_no_mac: wc_MACAlgorithm = 0;
pub const wc_MACAlgorithm_md5_mac: wc_MACAlgorithm = 1;
pub const wc_MACAlgorithm_sha_mac: wc_MACAlgorithm = 2;
pub const wc_MACAlgorithm_sha224_mac: wc_MACAlgorithm = 3;
pub const wc_MACAlgorithm_sha256_mac: wc_MACAlgorithm = 4;
pub const wc_MACAlgorithm_sha384_mac: wc_MACAlgorithm = 5;
pub const wc_MACAlgorithm_sha512_mac: wc_MACAlgorithm = 6;
pub const wc_MACAlgorithm_rmd_mac: wc_MACAlgorithm = 7;
pub const wc_MACAlgorithm_blake2b_mac: wc_MACAlgorithm = 8;
pub const wc_MACAlgorithm_sm3_mac: wc_MACAlgorithm = 9;
pub type wc_MACAlgorithm = ::std::os::raw::c_uint;
pub const wc_HashFlags_WC_HASH_FLAG_NONE: wc_HashFlags = 0;
pub const wc_HashFlags_WC_HASH_FLAG_WILLCOPY: wc_HashFlags = 1;
pub const wc_HashFlags_WC_HASH_FLAG_ISCOPY: wc_HashFlags = 2;
pub type wc_HashFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wc_HashAlg {
    pub md5: wc_Md5,
    pub sha: wc_Sha,
    pub sha256: wc_Sha256,
}
#[test]
fn bindgen_test_layout_wc_HashAlg() {
    const UNINIT: ::std::mem::MaybeUninit<wc_HashAlg> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wc_HashAlg>(),
        120usize,
        concat!("Size of: ", stringify!(wc_HashAlg))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_HashAlg>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_HashAlg))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md5) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_HashAlg),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_HashAlg),
            "::",
            stringify!(sha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sha256) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_HashAlg),
            "::",
            stringify!(sha256)
        )
    );
}
extern "C" {
    pub fn wc_HashGetOID(hash_type: wc_HashType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_OidGetHash(oid: ::std::os::raw::c_int) -> wc_HashType;
}
extern "C" {
    pub fn wc_HashTypeConvert(hashType: ::std::os::raw::c_int) -> wc_HashType;
}
extern "C" {
    pub fn wc_HashGetDigestSize(hash_type: wc_HashType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HashGetBlockSize(hash_type: wc_HashType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Hash(
        hash_type: wc_HashType,
        data: *const byte,
        data_len: word32,
        hash: *mut byte,
        hash_len: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Hash_ex(
        hash_type: wc_HashType,
        data: *const byte,
        data_len: word32,
        hash: *mut byte,
        hash_len: word32,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HashInit_ex(
        hash: *mut wc_HashAlg,
        type_: wc_HashType,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HashInit(hash: *mut wc_HashAlg, type_: wc_HashType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HashUpdate(
        hash: *mut wc_HashAlg,
        type_: wc_HashType,
        data: *const byte,
        dataSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HashFinal(
        hash: *mut wc_HashAlg,
        type_: wc_HashType,
        out: *mut byte,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HashFree(hash: *mut wc_HashAlg, type_: wc_HashType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Hash(data: *const byte, len: word32, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Md5Hash_ex(
        data: *const byte,
        len: word32,
        hash: *mut byte,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaHash(data: *const byte, len: word32, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_ShaHash_ex(
        data: *const byte,
        len: word32,
        hash: *mut byte,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Hash(data: *const byte, len: word32, hash: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_Sha256Hash_ex(
        data: *const byte,
        len: word32,
        hash: *mut byte,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type sp_uint8 = ::std::os::raw::c_uchar;
pub type sp_int8 = ::std::os::raw::c_char;
pub type sp_uint16 = ::std::os::raw::c_ushort;
pub type sp_int16 = ::std::os::raw::c_short;
pub type sp_uint32 = ::std::os::raw::c_uint;
pub type sp_int32 = ::std::os::raw::c_int;
pub type sp_uint64 = ::std::os::raw::c_ulong;
pub type sp_int64 = ::std::os::raw::c_long;
pub type sp_int_digit = sp_uint32;
pub type sp_int_sdigit = sp_int32;
pub type sp_int_word = sp_uint64;
pub type sp_int_sword = sp_int64;
pub type sp_digit = sp_int32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_int {
    pub used: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub dp: [sp_int_digit; 193usize],
}
#[test]
fn bindgen_test_layout_sp_int() {
    const UNINIT: ::std::mem::MaybeUninit<sp_int> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sp_int>(),
        780usize,
        concat!("Size of: ", stringify!(sp_int))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_int>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_int))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_int),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_int),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_int),
            "::",
            stringify!(dp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sp_int_minimal {
    pub used: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub dp: [sp_int_digit; 1usize],
}
#[test]
fn bindgen_test_layout_sp_int_minimal() {
    const UNINIT: ::std::mem::MaybeUninit<sp_int_minimal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sp_int_minimal>(),
        12usize,
        concat!("Size of: ", stringify!(sp_int_minimal))
    );
    assert_eq!(
        ::std::mem::align_of::<sp_int_minimal>(),
        4usize,
        concat!("Alignment of ", stringify!(sp_int_minimal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_int_minimal),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_int_minimal),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sp_int_minimal),
            "::",
            stringify!(dp)
        )
    );
}
pub type mp_int = sp_int;
pub type mp_digit = sp_int_digit;
extern "C" {
    pub fn sp_init(a: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_init_size(a: *mut sp_int, size: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_init_multi(
        n1: *mut sp_int,
        n2: *mut sp_int,
        n3: *mut sp_int,
        n4: *mut sp_int,
        n5: *mut sp_int,
        n6: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_free(a: *mut sp_int);
}
extern "C" {
    pub fn sp_grow(a: *mut sp_int, l: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_zero(a: *mut sp_int);
}
extern "C" {
    pub fn sp_clear(a: *mut sp_int);
}
extern "C" {
    pub fn sp_forcezero(a: *mut sp_int);
}
extern "C" {
    pub fn sp_init_copy(r: *mut sp_int, a: *const sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_copy(a: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_exch(a: *mut sp_int, b: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_cond_swap_ct(
        a: *mut sp_int,
        b: *mut sp_int,
        cnt: ::std::os::raw::c_int,
        swap: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_cond_swap_ct_ex(
        a: *mut sp_int,
        b: *mut sp_int,
        cnt: ::std::os::raw::c_int,
        swap: ::std::os::raw::c_int,
        t: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_cmp_mag(a: *const sp_int, b: *const sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_cmp(a: *const sp_int, b: *const sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_cmp_ct(
        a: *const sp_int,
        b: *const sp_int,
        n: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_is_bit_set(a: *const sp_int, b: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_count_bits(a: *const sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_leading_bit(a: *const sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_set_bit(a: *mut sp_int, i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_2expt(a: *mut sp_int, e: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_set(a: *mut sp_int, d: sp_int_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_set_int(a: *mut sp_int, n: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_cmp_d(a: *const sp_int, d: sp_int_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_add_d(a: *const sp_int, d: sp_int_digit, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sub_d(a: *const sp_int, d: sp_int_digit, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mul_d(a: *const sp_int, d: sp_int_digit, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_div_d(
        a: *const sp_int,
        d: sp_int_digit,
        r: *mut sp_int,
        rem: *mut sp_int_digit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mod_d(
        a: *const sp_int,
        d: sp_int_digit,
        r: *mut sp_int_digit,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_add(a: *const sp_int, b: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sub(a: *const sp_int, b: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_addmod(
        a: *const sp_int,
        b: *const sp_int,
        m: *const sp_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_submod(
        a: *const sp_int,
        b: *const sp_int,
        m: *const sp_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_lshd(a: *mut sp_int, s: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rshd(a: *mut sp_int, c: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sp_rshb(
        a: *const sp_int,
        n: ::std::os::raw::c_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_div(
        a: *const sp_int,
        d: *const sp_int,
        r: *mut sp_int,
        rem: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mod(a: *const sp_int, m: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mul(a: *const sp_int, b: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mulmod(
        a: *const sp_int,
        b: *const sp_int,
        m: *const sp_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_invmod(a: *const sp_int, m: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_exptmod_ex(
        b: *const sp_int,
        e: *const sp_int,
        digits: ::std::os::raw::c_int,
        m: *const sp_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_exptmod(
        b: *const sp_int,
        e: *const sp_int,
        m: *const sp_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_exptmod_nct(
        b: *const sp_int,
        e: *const sp_int,
        m: *const sp_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_div_2d(
        a: *const sp_int,
        e: ::std::os::raw::c_int,
        r: *mut sp_int,
        rem: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mul_2d(
        a: *const sp_int,
        e: ::std::os::raw::c_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mod_2d(
        a: *const sp_int,
        e: ::std::os::raw::c_int,
        r: *mut sp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sqr(a: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_sqrmod(a: *const sp_int, m: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mont_red_ex(
        a: *mut sp_int,
        m: *const sp_int,
        mp: sp_int_digit,
        ct: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mont_setup(m: *const sp_int, rho: *mut sp_int_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_mont_norm(norm: *mut sp_int, m: *const sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_unsigned_bin_size(a: *const sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_read_unsigned_bin(
        a: *mut sp_int,
        in_: *const byte,
        inSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_to_unsigned_bin(a: *const sp_int, out: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_to_unsigned_bin_len(
        a: *const sp_int,
        out: *mut byte,
        outSz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_to_unsigned_bin_len_ct(
        a: *const sp_int,
        out: *mut byte,
        outSz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_to_unsigned_bin_at_pos(
        o: ::std::os::raw::c_int,
        a: *const sp_int,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_read_radix(
        a: *mut sp_int,
        in_: *const ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_tohex(a: *const sp_int, str_: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_todecimal(
        a: *const sp_int,
        str_: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_toradix(
        a: *const sp_int,
        str_: *mut ::std::os::raw::c_char,
        radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_radix_size(
        a: *const sp_int,
        radix: ::std::os::raw::c_int,
        size: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_rand_prime(
        r: *mut sp_int,
        len: ::std::os::raw::c_int,
        rng: *mut WC_RNG,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_prime_is_prime(
        a: *const sp_int,
        t: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_prime_is_prime_ex(
        a: *const sp_int,
        t: ::std::os::raw::c_int,
        result: *mut ::std::os::raw::c_int,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sp_gcd(a: *const sp_int, b: *const sp_int, r: *mut sp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CheckRunTimeFastMath() -> word32;
}
extern "C" {
    pub fn get_digit_count(a: *const mp_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn get_digit(a: *const mp_int, n: ::std::os::raw::c_int) -> mp_digit;
}
extern "C" {
    pub fn get_rand_digit(rng: *mut WC_RNG, d: *mut mp_digit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_reverse(s: *mut ::std::os::raw::c_uchar, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mp_cond_copy(
        a: *mut mp_int,
        copy: ::std::os::raw::c_int,
        b: *mut mp_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mp_rand(
        a: *mut mp_int,
        digits: ::std::os::raw::c_int,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
pub const DSA_PUBLIC: _bindgen_ty_25 = 0;
pub const DSA_PRIVATE: _bindgen_ty_25 = 1;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const DSA_160_HALF_SIZE: _bindgen_ty_26 = 20;
pub const DSA_160_SIG_SIZE: _bindgen_ty_26 = 40;
pub const DSA_HALF_SIZE: _bindgen_ty_26 = 20;
pub const DSA_SIG_SIZE: _bindgen_ty_26 = 40;
pub const DSA_256_HALF_SIZE: _bindgen_ty_26 = 32;
pub const DSA_256_SIG_SIZE: _bindgen_ty_26 = 64;
pub const DSA_MIN_HALF_SIZE: _bindgen_ty_26 = 20;
pub const DSA_MIN_SIG_SIZE: _bindgen_ty_26 = 40;
pub const DSA_MAX_HALF_SIZE: _bindgen_ty_26 = 32;
pub const DSA_MAX_SIG_SIZE: _bindgen_ty_26 = 64;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DsaKey {
    pub p: mp_int,
    pub q: mp_int,
    pub g: mp_int,
    pub y: mp_int,
    pub x: mp_int,
    pub type_: ::std::os::raw::c_int,
    pub heap: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_DsaKey() {
    const UNINIT: ::std::mem::MaybeUninit<DsaKey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DsaKey>(),
        3912usize,
        concat!("Size of: ", stringify!(DsaKey))
    );
    assert_eq!(
        ::std::mem::align_of::<DsaKey>(),
        8usize,
        concat!("Alignment of ", stringify!(DsaKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        780usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(q))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        1560usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(g))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2340usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        3120usize,
        concat!("Offset of field: ", stringify!(DsaKey), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        3900usize,
        concat!(
            "Offset of field: ",
            stringify!(DsaKey),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        3904usize,
        concat!(
            "Offset of field: ",
            stringify!(DsaKey),
            "::",
            stringify!(heap)
        )
    );
}
extern "C" {
    pub fn wc_InitDsaKey(key: *mut DsaKey) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitDsaKey_h(
        key: *mut DsaKey,
        h: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FreeDsaKey(key: *mut DsaKey);
}
extern "C" {
    pub fn wc_DsaSign(
        digest: *const byte,
        out: *mut byte,
        key: *mut DsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaSign_ex(
        digest: *const byte,
        digestSz: word32,
        out: *mut byte,
        key: *mut DsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaVerify(
        digest: *const byte,
        sig: *const byte,
        key: *mut DsaKey,
        answer: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaVerify_ex(
        digest: *const byte,
        digestSz: word32,
        sig: *const byte,
        key: *mut DsaKey,
        answer: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaPublicKeyDecode(
        input: *const byte,
        inOutIdx: *mut word32,
        key: *mut DsaKey,
        inSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaPrivateKeyDecode(
        input: *const byte,
        inOutIdx: *mut word32,
        key: *mut DsaKey,
        inSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaKeyToDer(
        key: *mut DsaKey,
        output: *mut byte,
        inLen: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_SetDsaPublicKey(
        output: *mut byte,
        key: *mut DsaKey,
        outLen: ::std::os::raw::c_int,
        with_header: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaKeyToPublicDer(
        key: *mut DsaKey,
        output: *mut byte,
        inLen: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaImportParamsRaw(
        dsa: *mut DsaKey,
        p: *const ::std::os::raw::c_char,
        q: *const ::std::os::raw::c_char,
        g: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaImportParamsRawCheck(
        dsa: *mut DsaKey,
        p: *const ::std::os::raw::c_char,
        q: *const ::std::os::raw::c_char,
        g: *const ::std::os::raw::c_char,
        trusted: ::std::os::raw::c_int,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaExportParamsRaw(
        dsa: *mut DsaKey,
        p: *mut byte,
        pSz: *mut word32,
        q: *mut byte,
        qSz: *mut word32,
        g: *mut byte,
        gSz: *mut word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_DsaExportKeyRaw(
        dsa: *mut DsaKey,
        x: *mut byte,
        xSz: *mut word32,
        y: *mut byte,
        ySz: *mut word32,
    ) -> ::std::os::raw::c_int;
}
pub const HMAC_FIPS_MIN_KEY: _bindgen_ty_27 = 14;
pub const IPAD: _bindgen_ty_27 = 54;
pub const OPAD: _bindgen_ty_27 = 92;
pub const WC_SHA512: _bindgen_ty_27 = 8;
pub const WC_SHA512_224: _bindgen_ty_27 = 16;
pub const WC_SHA512_256: _bindgen_ty_27 = 17;
pub const WC_SHA384: _bindgen_ty_27 = 7;
pub const WC_SHA224: _bindgen_ty_27 = 5;
pub const WC_SHA3_224: _bindgen_ty_27 = 10;
pub const WC_SHA3_256: _bindgen_ty_27 = 11;
pub const WC_SHA3_384: _bindgen_ty_27 = 12;
pub const WC_SHA3_512: _bindgen_ty_27 = 13;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wc_HmacHash {
    pub md5: wc_Md5,
    pub sha: wc_Sha,
    pub sha256: wc_Sha256,
}
#[test]
fn bindgen_test_layout_wc_HmacHash() {
    const UNINIT: ::std::mem::MaybeUninit<wc_HmacHash> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<wc_HmacHash>(),
        120usize,
        concat!("Size of: ", stringify!(wc_HmacHash))
    );
    assert_eq!(
        ::std::mem::align_of::<wc_HmacHash>(),
        8usize,
        concat!("Alignment of ", stringify!(wc_HmacHash))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).md5) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_HmacHash),
            "::",
            stringify!(md5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sha) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_HmacHash),
            "::",
            stringify!(sha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sha256) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wc_HmacHash),
            "::",
            stringify!(sha256)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hmac {
    pub hash: wc_HmacHash,
    pub ipad: [word32; 16usize],
    pub opad: [word32; 16usize],
    pub innerHash: [word32; 8usize],
    pub heap: *mut ::std::os::raw::c_void,
    pub macType: byte,
    pub innerHashKeyed: byte,
}
#[test]
fn bindgen_test_layout_Hmac() {
    const UNINIT: ::std::mem::MaybeUninit<Hmac> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Hmac>(),
        296usize,
        concat!("Size of: ", stringify!(Hmac))
    );
    assert_eq!(
        ::std::mem::align_of::<Hmac>(),
        8usize,
        concat!("Alignment of ", stringify!(Hmac))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Hmac),
            "::",
            stringify!(hash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipad) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(Hmac),
            "::",
            stringify!(ipad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opad) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(Hmac),
            "::",
            stringify!(opad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerHash) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(Hmac),
            "::",
            stringify!(innerHash)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(Hmac),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).macType) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(Hmac),
            "::",
            stringify!(macType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).innerHashKeyed) as usize - ptr as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(Hmac),
            "::",
            stringify!(innerHashKeyed)
        )
    );
}
extern "C" {
    pub fn wc_HmacSetKey(
        hmac: *mut Hmac,
        type_: ::std::os::raw::c_int,
        key: *const byte,
        keySz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HmacSetKey_ex(
        hmac: *mut Hmac,
        type_: ::std::os::raw::c_int,
        key: *const byte,
        length: word32,
        allowFlag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HmacUpdate(hmac: *mut Hmac, in_: *const byte, sz: word32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HmacFinal(hmac: *mut Hmac, out: *mut byte) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HmacSizeByType(type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HmacInit(
        hmac: *mut Hmac,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_HmacFree(hmac: *mut Hmac);
}
extern "C" {
    pub fn wolfSSL_GetHmacMaxSize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _InitHmac(
        hmac: *mut Hmac,
        type_: ::std::os::raw::c_int,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const RSA_PUBLIC: _bindgen_ty_28 = 0;
pub const RSA_PRIVATE: _bindgen_ty_28 = 1;
pub const RSA_TYPE_UNKNOWN: _bindgen_ty_28 = -1;
pub const RSA_PUBLIC_ENCRYPT: _bindgen_ty_28 = 0;
pub const RSA_PUBLIC_DECRYPT: _bindgen_ty_28 = 1;
pub const RSA_PRIVATE_ENCRYPT: _bindgen_ty_28 = 2;
pub const RSA_PRIVATE_DECRYPT: _bindgen_ty_28 = 3;
pub const RSA_BLOCK_TYPE_1: _bindgen_ty_28 = 1;
pub const RSA_BLOCK_TYPE_2: _bindgen_ty_28 = 2;
pub const RSA_MIN_PAD_SZ: _bindgen_ty_28 = 11;
pub const RSA_PSS_PAD_SZ: _bindgen_ty_28 = 8;
pub const RSA_PSS_SALT_MAX_SZ: _bindgen_ty_28 = 62;
pub const RSA_PSS_SALT_LEN_DEFAULT: _bindgen_ty_28 = -1;
pub type _bindgen_ty_28 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RsaKey {
    pub n: mp_int,
    pub e: mp_int,
    pub d: mp_int,
    pub p: mp_int,
    pub q: mp_int,
    pub dP: mp_int,
    pub dQ: mp_int,
    pub u: mp_int,
    pub heap: *mut ::std::os::raw::c_void,
    pub data: *mut byte,
    pub type_: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
    pub dataLen: word32,
    pub dataIsAlloc: byte,
}
#[test]
fn bindgen_test_layout_RsaKey() {
    const UNINIT: ::std::mem::MaybeUninit<RsaKey> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<RsaKey>(),
        6272usize,
        concat!("Size of: ", stringify!(RsaKey))
    );
    assert_eq!(
        ::std::mem::align_of::<RsaKey>(),
        8usize,
        concat!("Alignment of ", stringify!(RsaKey))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(RsaKey), "::", stringify!(n))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize },
        780usize,
        concat!("Offset of field: ", stringify!(RsaKey), "::", stringify!(e))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        1560usize,
        concat!("Offset of field: ", stringify!(RsaKey), "::", stringify!(d))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        2340usize,
        concat!("Offset of field: ", stringify!(RsaKey), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).q) as usize - ptr as usize },
        3120usize,
        concat!("Offset of field: ", stringify!(RsaKey), "::", stringify!(q))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dP) as usize - ptr as usize },
        3900usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(dP)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dQ) as usize - ptr as usize },
        4680usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(dQ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        5460usize,
        concat!("Offset of field: ", stringify!(RsaKey), "::", stringify!(u))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize },
        6240usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(heap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        6248usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        6256usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        6260usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataLen) as usize - ptr as usize },
        6264usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(dataLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataIsAlloc) as usize - ptr as usize },
        6268usize,
        concat!(
            "Offset of field: ",
            stringify!(RsaKey),
            "::",
            stringify!(dataIsAlloc)
        )
    );
}
extern "C" {
    pub fn wc_InitRsaKey(
        key: *mut RsaKey,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_InitRsaKey_ex(
        key: *mut RsaKey,
        heap: *mut ::std::os::raw::c_void,
        devId: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_FreeRsaKey(key: *mut RsaKey) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_CheckRsaKey(key: *mut RsaKey) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaFunction(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: *mut word32,
        type_: ::std::os::raw::c_int,
        key: *mut RsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPublicEncrypt(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPrivateDecryptInline(
        in_: *mut byte,
        inLen: word32,
        out: *mut *mut byte,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPrivateDecrypt(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaSSL_Sign(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_Sign(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        key: *mut RsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_Sign_ex(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        saltLen: ::std::os::raw::c_int,
        key: *mut RsaKey,
        rng: *mut WC_RNG,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaSSL_VerifyInline(
        in_: *mut byte,
        inLen: word32,
        out: *mut *mut byte,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaSSL_Verify(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaSSL_Verify_ex(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
        pad_type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaSSL_Verify_ex2(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
        pad_type: ::std::os::raw::c_int,
        hash: wc_HashType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_VerifyInline(
        in_: *mut byte,
        inLen: word32,
        out: *mut *mut byte,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_VerifyInline_ex(
        in_: *mut byte,
        inLen: word32,
        out: *mut *mut byte,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        saltLen: ::std::os::raw::c_int,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_Verify(
        in_: *mut byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_Verify_ex(
        in_: *mut byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        saltLen: ::std::os::raw::c_int,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_CheckPadding(
        in_: *const byte,
        inLen: word32,
        sig: *mut byte,
        sigSz: word32,
        hashType: wc_HashType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_CheckPadding_ex(
        in_: *const byte,
        inLen: word32,
        sig: *mut byte,
        sigSz: word32,
        hashType: wc_HashType,
        saltLen: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_CheckPadding_ex2(
        in_: *const byte,
        inLen: word32,
        sig: *mut byte,
        sigSz: word32,
        hashType: wc_HashType,
        saltLen: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_VerifyCheckInline(
        in_: *mut byte,
        inLen: word32,
        out: *mut *mut byte,
        digest: *const byte,
        digentLen: word32,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPSS_VerifyCheck(
        in_: *mut byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        digest: *const byte,
        digestLen: word32,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaEncryptSize(key: *const RsaKey) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPrivateKeyDecode(
        input: *const byte,
        inOutIdx: *mut word32,
        key: *mut RsaKey,
        inSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPrivateKeyValidate(
        input: *const byte,
        inOutIdx: *mut word32,
        keySz: *mut ::std::os::raw::c_int,
        inSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPublicKeyDecode(
        input: *const byte,
        inOutIdx: *mut word32,
        key: *mut RsaKey,
        inSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPublicKeyDecodeRaw(
        n: *const byte,
        nSz: word32,
        e: *const byte,
        eSz: word32,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPublicEncrypt_ex(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
        rng: *mut WC_RNG,
        type_: ::std::os::raw::c_int,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        label: *mut byte,
        labelSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPrivateDecrypt_ex(
        in_: *const byte,
        inLen: word32,
        out: *mut byte,
        outLen: word32,
        key: *mut RsaKey,
        type_: ::std::os::raw::c_int,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        label: *mut byte,
        labelSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPrivateDecryptInline_ex(
        in_: *mut byte,
        inLen: word32,
        out: *mut *mut byte,
        key: *mut RsaKey,
        type_: ::std::os::raw::c_int,
        hash: wc_HashType,
        mgf: ::std::os::raw::c_int,
        label: *mut byte,
        labelSz: word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaFlattenPublicKey(
        key: *mut RsaKey,
        e: *mut byte,
        eSz: *mut word32,
        n: *mut byte,
        nSz: *mut word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaExportKey(
        key: *mut RsaKey,
        e: *mut byte,
        eSz: *mut word32,
        n: *mut byte,
        nSz: *mut word32,
        d: *mut byte,
        dSz: *mut word32,
        p: *mut byte,
        pSz: *mut word32,
        q: *mut byte,
        qSz: *mut word32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPad_ex(
        input: *const byte,
        inputLen: word32,
        pkcsBlock: *mut byte,
        pkcsBlockLen: word32,
        padValue: byte,
        rng: *mut WC_RNG,
        padType: ::std::os::raw::c_int,
        hType: wc_HashType,
        mgf: ::std::os::raw::c_int,
        optLabel: *mut byte,
        labelLen: word32,
        saltLen: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaUnPad_ex(
        pkcsBlock: *mut byte,
        pkcsBlockLen: word32,
        out: *mut *mut byte,
        padValue: byte,
        padType: ::std::os::raw::c_int,
        hType: wc_HashType,
        mgf: ::std::os::raw::c_int,
        optLabel: *mut byte,
        labelLen: word32,
        saltLen: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        heap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_hash2mgf(hType: wc_HashType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RsaFunctionCheckIn(
        in_: *const byte,
        inLen: word32,
        key: *mut RsaKey,
        checkSmallCt: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wc_RsaPrivateKeyDecodeRaw(
        n: *const byte,
        nSz: word32,
        e: *const byte,
        eSz: word32,
        d: *const byte,
        dSz: word32,
        u: *const byte,
        uSz: word32,
        p: *const byte,
        pSz: word32,
        q: *const byte,
        qSz: word32,
        dP: *const byte,
        dPSz: word32,
        dQ: *const byte,
        dQSz: word32,
        key: *mut RsaKey,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DRBG {
    pub _address: u8,
}
