diff --git a/rustls-wolfcrypt-provider/src/kx/x25519.rs b/rustls-wolfcrypt-provider/src/kx/x25519.rs
index 14d610e..b0ee459 100644
--- a/rustls-wolfcrypt-provider/src/kx/x25519.rs
+++ b/rustls-wolfcrypt-provider/src/kx/x25519.rs
@@ -14,6 +14,7 @@ impl KeyExchangeX25519 {
             let mut key: curve25519_key = mem::zeroed();
             let key_object = Curve25519KeyObject::from_ptr(&mut key);
             let mut rng: WC_RNG = mem::zeroed();
+            let rng_object = WCRNGObject::from_ptr(&mut rng);
             let mut ret;
             let mut pub_key_raw: [u8; 32] = [0; 32];
             let mut pub_key_raw_len: word32 = pub_key_raw.len() as word32;
@@ -28,7 +29,7 @@ impl KeyExchangeX25519 {
                 panic!("panic while calling wc_curve25519_init, ret = {}", ret);
             }
 
-            ret = wc_InitRng(&mut rng);
+            ret = wc_InitRng(rng_object.as_ptr());
             if ret < 0 {
                 panic!("panic while calling wc_InitRng, ret = {}", ret);
             }
@@ -175,3 +176,36 @@ unsafe impl ForeignType for Curve25519KeyObject {
     }
 }
 
+pub struct WCRNGObjectRef(Opaque);
+unsafe impl ForeignTypeRef for WCRNGObjectRef {
+    type CType = WC_RNG;
+}
+
+pub struct  WCRNGObject(NonNull<WC_RNG>);
+unsafe impl Sync for WCRNGObject{}
+unsafe impl Send for WCRNGObject{}
+unsafe impl ForeignType for WCRNGObject {
+    type CType = WC_RNG;
+
+    type Ref = WCRNGObjectRef;
+
+    unsafe fn from_ptr(ptr: *mut Self::CType) -> Self {
+        Self(NonNull::new_unchecked(ptr))
+    }
+
+    fn as_ptr(&self) -> *mut Self::CType {
+        self.0.as_ptr()
+    }
+}
+
+impl Drop for WCRNGObject {
+    fn drop(&mut self) {
+        unsafe {
+            // Correctly free the RNG object.
+            let ret = wc_FreeRng(self.as_ptr());
+            if ret != 0 {
+                panic!("Error while freeing RNG!");
+            }
+        }
+    }
+}
diff --git a/rustls-wolfcrypt-provider/src/random.rs b/rustls-wolfcrypt-provider/src/random.rs
index 5e1ca93..726b6b1 100644
--- a/rustls-wolfcrypt-provider/src/random.rs
+++ b/rustls-wolfcrypt-provider/src/random.rs
@@ -1,9 +1,12 @@
 use wolfcrypt_rs::*;
 use core::mem;
+use foreign_types::{ForeignType, ForeignTypeRef, Opaque};
+use std::{ptr::NonNull};
 
 pub fn wolfcrypt_random_buffer_generator(buff: &mut [u8]) {
     unsafe {
         let mut rng: WC_RNG = mem::zeroed();
+        let rng_object = WCRNGObject::from_ptr(&mut rng);
         let buff_length: word32 = buff.len() as word32;
         let mut ret;
 
@@ -11,7 +14,7 @@ pub fn wolfcrypt_random_buffer_generator(buff: &mut [u8]) {
         // rng->drbg (deterministic random bit generator) allocated 
         // (should be deallocated with wc_FreeRng). 
         // This is a blocking operation.
-        ret = wc_InitRng(&mut rng);
+        ret = wc_InitRng(rng_object.as_ptr());
         if ret != 0 {
             panic!("Error while initializing RNG!");
         }
@@ -23,11 +26,6 @@ pub fn wolfcrypt_random_buffer_generator(buff: &mut [u8]) {
             panic!("Error while generating block!");
         }
 
-        // Correctly free the RNG object.
-        ret = wc_FreeRng(&mut rng);
-        if ret != 0 {
-            panic!("Error while freeing RNG!");
-        }
     }
 }
 
@@ -46,3 +44,37 @@ mod tests {
         assert_ne!(buff_1, buff_2);
     }
 }
+
+pub struct WCRNGObjectRef(Opaque);
+unsafe impl ForeignTypeRef for WCRNGObjectRef {
+    type CType = WC_RNG;
+}
+
+pub struct  WCRNGObject(NonNull<WC_RNG>);
+unsafe impl Sync for WCRNGObject{}
+unsafe impl Send for WCRNGObject{}
+unsafe impl ForeignType for WCRNGObject {
+    type CType = WC_RNG;
+
+    type Ref = WCRNGObjectRef;
+
+    unsafe fn from_ptr(ptr: *mut Self::CType) -> Self {
+        Self(NonNull::new_unchecked(ptr))
+    }
+
+    fn as_ptr(&self) -> *mut Self::CType {
+        self.0.as_ptr()
+    }
+}
+
+impl Drop for WCRNGObject {
+    fn drop(&mut self) {
+        unsafe {
+            // Correctly free the RNG object.
+            let ret = wc_FreeRng(self.as_ptr());
+            if ret != 0 {
+                panic!("Error while freeing RNG!");
+            }
+        }
+    }
+}
